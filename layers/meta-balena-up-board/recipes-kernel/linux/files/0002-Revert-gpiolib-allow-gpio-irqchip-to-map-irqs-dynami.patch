From 8f9a1d0ed632d12d4888e83ce0589f68c4f0c5fe Mon Sep 17 00:00:00 2001
From: Vicentiu Galanopulo <vicentiu@balena.io>
Date: Wed, 19 Aug 2020 12:11:47 +0200
Subject: [PATCH] Revert "gpiolib: allow gpio irqchip to map irqs dynamically"

This reverts commit dc749a09ea5e413564115dee742c3bc958248707.

We revert this because we get
[ 58.380237] BUG: unable to handle kernel NULL pointer dereference at 0000000000000018
[ 58.380264] IP: irq_chip_set_type_parent+0x9/0x30

when adding in /sys edge-triggered interrupts

Upstream-Status: Inappropriate [configuration]
Signed-off-by: Vicentiu Galanopulo <vicentiu@balena.io>
Signed-off-by: Florin Sarbu <florin@balena.io>
---
 drivers/gpio/gpiolib.c | 30 +++++++++++++++++++++++-------
 1 file changed, 23 insertions(+), 7 deletions(-)

diff --git a/drivers/gpio/gpiolib.c b/drivers/gpio/gpiolib.c
index 5339585..a7f18ad 100644
--- a/drivers/gpio/gpiolib.c
+++ b/drivers/gpio/gpiolib.c
@@ -1766,9 +1766,6 @@ int gpiochip_irq_map(struct irq_domain *d, unsigned int irq,
 	struct gpio_chip *chip = d->host_data;
 	int err = 0;
 
-	if (!gpiochip_irqchip_irq_valid(chip, hwirq))
-		return -ENXIO;
-
 	irq_set_chip_data(irq, chip);
 	/*
 	 * This lock class tells lockdep that GPIO irqs are in a different
@@ -1847,10 +1844,7 @@ static void gpiochip_irq_relres(struct irq_data *d)
 
 static int gpiochip_to_irq(struct gpio_chip *chip, unsigned offset)
 {
-	if (!gpiochip_irqchip_irq_valid(chip, offset))
-		return -ENXIO;
-
-	return irq_create_mapping(chip->irq.domain, offset);
+	return irq_find_mapping(chip->irq.domain, offset);
 }
 
 /**
@@ -2023,6 +2017,9 @@ int gpiochip_irqchip_add_key(struct gpio_chip *gpiochip,
 			     struct lock_class_key *request_key)
 {
 	struct device_node *of_node;
+	bool irq_base_set = false;
+	unsigned int offset;
+	unsigned irq_base = 0;
 
 	if (!gpiochip || !irqchip)
 		return -EINVAL;
@@ -2080,6 +2077,25 @@ int gpiochip_irqchip_add_key(struct gpio_chip *gpiochip,
 		irqchip->irq_release_resources = gpiochip_irq_relres;
 	}
 
+       /*
+        * Prepare the mapping since the irqchip shall be orthogonal to
+        * any gpiochip calls. If the first_irq was zero, this is
+        * necessary to allocate descriptors for all IRQs.
+        */
+       for (offset = 0; offset < gpiochip->ngpio; offset++) {
+               if (!gpiochip_irqchip_irq_valid(gpiochip, offset))
+                       continue;
+               irq_base = irq_create_mapping(gpiochip->irq.domain, offset);
+               if (!irq_base_set) {
+                       /*
+                        * Store the base into the gpiochip to be used when
+                        * unmapping the irqs.
+                        */
+                       gpiochip->irq_base = irq_base;
+                       irq_base_set = true;
+               }
+       }
+
 	acpi_gpiochip_request_interrupts(gpiochip);
 
 	return 0;
-- 
2.7.4

